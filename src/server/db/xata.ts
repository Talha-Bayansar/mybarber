// Generated by Xata Codegen 0.28.4. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "barbershop",
    columns: [
      { name: "logo", type: "file", file: { defaultPublicAccess: true } },
      { name: "verified", type: "bool", notNull: true, defaultValue: "false" },
      { name: "name", type: "string", notNull: true, defaultValue: "" },
      {
        name: "address",
        type: "link",
        link: { table: "address" },
        unique: true,
      },
      { name: "phoneNumber", type: "string" },
      { name: "email", type: "email" },
    ],
    revLinks: [{ column: "barbershop", table: "barber" }],
  },
  {
    name: "address",
    columns: [
      { name: "street", type: "string" },
      { name: "zip", type: "string" },
      { name: "city", type: "string" },
      { name: "houseNumber", type: "string" },
    ],
    revLinks: [{ column: "address", table: "barbershop" }],
  },
  {
    name: "barber",
    columns: [
      { name: "firstName", type: "string" },
      { name: "lastName", type: "string" },
      { name: "barbershop", type: "link", link: { table: "barbershop" } },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Barbershop = InferredTypes["barbershop"];
export type BarbershopRecord = Barbershop & XataRecord;

export type Address = InferredTypes["address"];
export type AddressRecord = Address & XataRecord;

export type Barber = InferredTypes["barber"];
export type BarberRecord = Barber & XataRecord;

export type DatabaseSchema = {
  barbershop: BarbershopRecord;
  address: AddressRecord;
  barber: BarberRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Talha-Bayansar-s-workspace-l2p3gj.eu-central-1.xata.sh/db/my-barber",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
